[gd_resource type="Shader" format=3 uid="uid://bp2ihin1o8y5n"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform bool active_split = false;

uniform vec3 split_plane_origin;

uniform vec3 split_plane_normal;

uniform sampler2D clip_planes_texture : filter_nearest, repeat_disable;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {

	vec4 world_position = INV_VIEW_MATRIX * INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2. - 1., FRAGCOORD.z, 1.);
	world_position.xyz /= world_position.w;

	vec3 plane_offset = world_position.xyz - split_plane_origin;
	if(active_split && dot(plane_offset, split_plane_normal) < 0.) {
		discard;
	}
	float projection_value = PROJECTION_MATRIX[2][2];
	int clip_plane_index = int(round((projection_value * 1. + 1.) / (projection_value) - 500.));

	vec3 clip_plane_origin = texelFetch(clip_planes_texture, ivec2(clip_plane_index * 2, 0), 0).xyz;
	vec3 clip_plane_normal = texelFetch(clip_planes_texture, ivec2(clip_plane_index * 2 + 1, 0), 0).xyz;

	if(dot(world_position.xyz - clip_plane_origin, clip_plane_normal) < 0.) {
		discard;
	}

	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
"
